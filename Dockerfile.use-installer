FROM ubuntu:20.04 as base

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles

# install depedencies that are not yet in the installer
RUN apt-get update && apt-get install -y \
    curl \
    git \
    gnupg \
    libcanberra-gtk-module \
    make \
    wget \
    xz-utils && \
    rm -rf /var/lib/apt/lists/*

# make /bin/sh symlink to bash instead of dash:
RUN echo "dash dash/sh boolean false" | debconf-set-selections
RUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

# install bazel (needed for tensorFlow)    
RUN curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg && \
    mv bazel.gpg /etc/apt/trusted.gpg.d/ && \
    echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
    apt update && apt install -y \
    bazel && \
    rm -rf /var/lib/apt/lists/*

# add ARGs so that these can be passed in while doing a docker build, the following will be default values
ARG TAG=v0.0.0
ENV INSTALL_DIR="/opt/symbiflow/eos-s3"
# Appending all of these commands (mostly the chmod 755 commands) saved about 1.9 GB in image size
RUN wget https://github.com/QuickLogic-Corp/quicklogic-fpga-toolchain/releases/download/${TAG}/Symbiflow_${TAG}.gz.run && \
    chmod 755 Symbiflow_${TAG}.gz.run && \
    ./Symbiflow_${TAG}.gz.run && \
    rm Symbiflow_${TAG}.gz.run && \
    chmod 755 /opt/symbiflow && \
    chmod 755 /opt/symbiflow/eos-s3 && \
    chmod -R 755 /opt/symbiflow/eos-s3/conda && \
    chmod -R 755 /opt/symbiflow/eos-s3/quicklogic-arch-defs

ENV PATH="${INSTALL_DIR}/quicklogic-arch-defs/bin:${INSTALL_DIR}/quicklogic-arch-defs/bin/python:$PATH"

# The symbiflow-ql target is the same as in previous versions of Dockerfile.use-installer.
# It contains no user or entrypoint, which makes it easy to re-use as a parent image.
#
# Build the symbiflow-ql target with a command like this:
# docker build --build-arg TAG=v1.3.0 -f Dockerfile.use-installer --target symbiflow-ql . -t symbiflow-ql
#
# Run it with a command like this:
# docker run -it --rm -e DISPLAY=$DISPLAY -v "/tmp/.X11-unix:/tmp/.X11-unix" -v $(pwd):/root symbiflow-ql bash
#
FROM base as symbiflow-ql

# The qorc-base target has no user and no entrypoint specified, which makes
# it useful as a base image.  
#
# Build the qorc-base target with a command like this:
# docker build --build-arg TAG=v1.3.0 -f Dockerfile.use-installer --target qorc-base . -t qorc-base
#
# Run it in the qorc-sdk directory or another project directory with a command like this:
# docker run -it --rm -e DISPLAY=$DISPLAY -v "/tmp/.X11-unix:/tmp/.X11-unix" -v $(pwd):/root qorc-base bash
#
# Note that when using the qorc-base target, there is no entrypoint script so you need to source 
# the conda.sh file, and activate conda before running make in qorc-sdk.
#
FROM symbiflow-ql as qorc-base

WORKDIR /opt

RUN wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 && \
    tar -xjvf gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 && \
    rm gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2

ENV PATH=/opt/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux:$PATH

# The following tests are run automatically during a build of the default qorc image
FROM qorc-base as qorc-test-base

WORKDIR /
RUN git clone --recursive https://github.com/QuickLogic-Corp/qorc-sdk.git

FROM qorc-test-base as qorc-test-qf_apps

WORKDIR /qorc-sdk/qf_apps
RUN source $INSTALL_DIR/conda/etc/profile.d/conda.sh && \
    conda activate && \
    make

FROM qorc-test-base as qorc-test-qf_vr_apps

WORKDIR /qorc-sdk/qf_vr_apps
RUN source $INSTALL_DIR/conda/etc/profile.d/conda.sh && \
    conda activate && \
    make

# The following qorc_testapps wouldn't build so they are commented out for now
#FROM qorc-test-base as qorc-test-qorc_testapps

#WORKDIR /qorc-sdk/qorc-testapps
#RUN source $INSTALL_DIR/conda/etc/profile.d/conda.sh && \
#conda activate && \
#make

# The qorc-user target adds a user and entrypoint to the default target.
# Build the qorc-user target with a command like this:
# docker build --build-arg TAG=v1.3.0 -f Dockerfile.use-installer --target qorc-user . -t qorc-user
#
# Run it in the qorc-sdk directory or any project directory with a command like this:
# docker run -it --rm -e DISPLAY=$DISPLAY -v "/tmp/.X11-unix:/tmp/.X11-unix" -v $(pwd):/home/ic qorc-user bash
#
# Note that the conda-user.sh file used as an entrypoint sources the conda.sh file and activates conda
# so there is no need to do those things when using this qorc-user target.  Simply run make inside qorc-sdk.
#
FROM qorc-base as qorc-user

RUN apt-get update && apt-get install -y \
    libusb-1.0-0 \
    python3-pip \
    usbutils \
    udev && \
    rm -rf /var/lib/apt/lists/*

ARG USER=ic
ARG UID=1000
ARG GID=1000
RUN addgroup --gid ${GID} ${USER}
RUN adduser --uid ${UID} --gid ${GID} --gecos "" --disabled-password --shell /bin/bash ${USER} 

USER ${USER}
WORKDIR /home/${USER}

SHELL [ "/bin/bash" ]
COPY conda-user.sh /scripts/conda-user.sh

ENTRYPOINT [ "/scripts/conda-user.sh" ]

# I would prefer to move the tests to this point, but doing so didn't work initially so 
# I left them after the qorc-base target for now.  It may have something to do with adding
# the entrypoint, or with permissions, or both.  More work is needed to move the tests.

FROM qorc-user as qorc
# If the above test builds complete, the qorc-user becomes the default target, qorc.
# Build the default qorc target with a command like this:
# docker build --build-arg TAG=v1.3.0 -f Dockerfile.use-installer . -t qorc
#
# Run it in the qorc-sdk directory or any project directory with a command like this:
# docker run -it --rm -e DISPLAY=$DISPLAY -v "/tmp/.X11-unix:/tmp/.X11-unix" -v $(pwd):/home/ic qorc bash
#
# Note that the conda-user.sh file used as an entrypoint sources the conda.sh file and activates conda
# so there is no need to do those things when using this qorc target.  Simply run make inside qorc-sdk.
#

